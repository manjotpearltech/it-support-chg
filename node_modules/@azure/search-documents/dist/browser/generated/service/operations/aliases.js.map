{"version":3,"file":"aliases.js","sourceRoot":"","sources":["../../../../../src/generated/service/operations/aliases.ts"],"names":[],"mappings":"AAAA,KAAK;AACL,0CAA0C;AAC1C,qCAAqC;AACrC,KAAK;AACL,8DAA8D;AAC9D,uFAAuF;AACvF,MAAM;;AAEN,8DAA8D;AAC9D,oDAAoD;AACpD,mDAAmD;AACnD,yDAAyD;AACzD,mEAAmE;AACnE,WAAW;AACX,iBAAiB;AACjB,iCAAiC;AACjC,2BAA2B;AAC3B,+BAA+B;AAC/B,yBAAyB;AACzB,yCAAyC;AACzC,mCAAmC;AACnC,iCAAiC;AACjC,8BAA8B;AAC9B,wBAAwB;AACxB,+BAA+B;AAE/B,8CAA8C;AAC9C,gDAAgD;AAChD,kDAAkD;AAElD,QAAQ;AACR,6DAA6D;AAC7D,qDAAqD;AACrD,QAAQ;AACR,+CAA+C;AAC/C,4BAA4B;AAC5B,MAAM;AAEN,QAAQ;AACR,mCAAmC;AACnC,2DAA2D;AAC3D,8CAA8C;AAC9C,QAAQ;AACR,YAAY;AACZ,0BAA0B;AAC1B,6CAA6C;AAC7C,wCAAwC;AACxC,+CAA+C;AAC/C,4BAA4B;AAC5B,6BAA6B;AAC7B,SAAS;AACT,MAAM;AAEN,QAAQ;AACR,yDAAyD;AACzD,8CAA8C;AAC9C,QAAQ;AACR,8EAA8E;AAC9E,+EAA+E;AAC/E,MAAM;AAEN,QAAQ;AACR,4EAA4E;AAC5E,yEAAyE;AACzE,qEAAqE;AACrE,8CAA8C;AAC9C,QAAQ;AACR,oBAAoB;AACpB,yBAAyB;AACzB,0BAA0B;AAC1B,qDAAqD;AACrD,gDAAgD;AAChD,+CAA+C;AAC/C,uCAAuC;AACvC,qCAAqC;AACrC,SAAS;AACT,MAAM;AAEN,QAAQ;AACR,2GAA2G;AAC3G,yEAAyE;AACzE,yDAAyD;AACzD,8CAA8C;AAC9C,QAAQ;AACR,YAAY;AACZ,yBAAyB;AACzB,6CAA6C;AAC7C,uBAAuB;AACvB,+CAA+C;AAC/C,gCAAgC;AAChC,6BAA6B;AAC7B,SAAS;AACT,MAAM;AAEN,QAAQ;AACR,sCAAsC;AACtC,2DAA2D;AAC3D,8CAA8C;AAC9C,QAAQ;AACR,SAAS;AACT,yBAAyB;AACzB,0CAA0C;AAC1C,qCAAqC;AACrC,+CAA+C;AAC/C,gCAAgC;AAChC,0BAA0B;AAC1B,SAAS;AACT,MAAM;AACN,IAAI;AACJ,8BAA8B;AAC9B,8EAA8E;AAE9E,0DAA0D;AAC1D,sBAAsB;AACtB,wBAAwB;AACxB,iBAAiB;AACjB,aAAa;AACb,yCAAyC;AACzC,SAAS;AACT,iBAAiB;AACjB,2CAA2C;AAC3C,SAAS;AACT,OAAO;AACP,mCAAmC;AACnC,8CAA8C;AAC9C,0CAA0C;AAC1C,mEAAmE;AACnE,uBAAuB;AACvB,gBAAgB;AAChB,KAAK;AACL,wDAAwD;AACxD,sBAAsB;AACtB,uBAAuB;AACvB,iBAAiB;AACjB,aAAa;AACb,+CAA+C;AAC/C,SAAS;AACT,iBAAiB;AACjB,2CAA2C;AAC3C,SAAS;AACT,OAAO;AACP,8CAA8C;AAC9C,0CAA0C;AAC1C,2CAA2C;AAC3C,gBAAgB;AAChB,KAAK;AACL,kEAAkE;AAClE,qCAAqC;AACrC,uBAAuB;AACvB,iBAAiB;AACjB,aAAa;AACb,yCAAyC;AACzC,SAAS;AACT,aAAa;AACb,yCAAyC;AACzC,SAAS;AACT,iBAAiB;AACjB,2CAA2C;AAC3C,SAAS;AACT,OAAO;AACP,mCAAmC;AACnC,8CAA8C;AAC9C,gEAAgE;AAChE,wBAAwB;AACxB,8BAA8B;AAC9B,yBAAyB;AACzB,0BAA0B;AAC1B,8BAA8B;AAC9B,yBAAyB;AACzB,OAAO;AACP,uBAAuB;AACvB,gBAAgB;AAChB,KAAK;AACL,0DAA0D;AAC1D,qCAAqC;AACrC,0BAA0B;AAC1B,iBAAiB;AACjB,eAAe;AACf,eAAe;AACf,iBAAiB;AACjB,2CAA2C;AAC3C,SAAS;AACT,OAAO;AACP,8CAA8C;AAC9C,gEAAgE;AAChE,wBAAwB;AACxB,yBAAyB;AACzB,0BAA0B;AAC1B,8BAA8B;AAC9B,OAAO;AACP,gBAAgB;AAChB,KAAK;AACL,uDAAuD;AACvD,qCAAqC;AACrC,uBAAuB;AACvB,iBAAiB;AACjB,aAAa;AACb,yCAAyC;AACzC,SAAS;AACT,iBAAiB;AACjB,2CAA2C;AAC3C,SAAS;AACT,OAAO;AACP,8CAA8C;AAC9C,gEAAgE;AAChE,2CAA2C;AAC3C,gBAAgB;AAChB,KAAK","sourcesContent":["// /*\n//  * Copyright (c) Microsoft Corporation.\n//  * Licensed under the MIT License.\n//  *\n//  * Code generated by Microsoft (R) AutoRest Code Generator.\n//  * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n//  */\n\n// import { Aliases } from \"../operationsInterfaces/index.js\";\n// import * as coreClient from \"@azure/core-client\";\n// import * as Mappers from \"../models/mappers.js\";\n// import * as Parameters from \"../models/parameters.js\";\n// import { SearchServiceClient } from \"../searchServiceClient.js\";\n// import {\n//   SearchAlias,\n//   AliasesCreateOptionalParams,\n//   AliasesCreateResponse,\n//   AliasesListOptionalParams,\n//   AliasesListResponse,\n//   AliasesCreateOrUpdateOptionalParams,\n//   AliasesCreateOrUpdateResponse,\n//   AliasesDeleteOptionalParams,\n//   AliasesGetOptionalParams,\n//   AliasesGetResponse,\n// } from \"../models/index.js\";\n\n// /** Class containing Aliases operations. */\n// export class AliasesImpl implements Aliases {\n//   private readonly client: SearchServiceClient;\n\n//   /**\n//    * Initialize a new instance of the class Aliases class.\n//    * @param client Reference to the service client\n//    */\n//   constructor(client: SearchServiceClient) {\n//     this.client = client;\n//   }\n\n//   /**\n//    * Creates a new search alias.\n//    * @param alias The definition of the alias to create.\n//    * @param options The options parameters.\n//    */\n//   create(\n//     alias: SearchAlias,\n//     options?: AliasesCreateOptionalParams,\n//   ): Promise<AliasesCreateResponse> {\n//     return this.client.sendOperationRequest(\n//       { alias, options },\n//       createOperationSpec,\n//     );\n//   }\n\n//   /**\n//    * Lists all aliases available for a search service.\n//    * @param options The options parameters.\n//    */\n//   list(options?: AliasesListOptionalParams): Promise<AliasesListResponse> {\n//     return this.client.sendOperationRequest({ options }, listOperationSpec);\n//   }\n\n//   /**\n//    * Creates a new search alias or updates an alias if it already exists.\n//    * @param aliasName The definition of the alias to create or update.\n//    * @param alias The definition of the alias to create or update.\n//    * @param options The options parameters.\n//    */\n//   createOrUpdate(\n//     aliasName: string,\n//     alias: SearchAlias,\n//     options?: AliasesCreateOrUpdateOptionalParams,\n//   ): Promise<AliasesCreateOrUpdateResponse> {\n//     return this.client.sendOperationRequest(\n//       { aliasName, alias, options },\n//       createOrUpdateOperationSpec,\n//     );\n//   }\n\n//   /**\n//    * Deletes a search alias and its associated mapping to an index. This operation is permanent, with no\n//    * recovery option. The mapped index is untouched by this operation.\n//    * @param aliasName The name of the alias to delete.\n//    * @param options The options parameters.\n//    */\n//   delete(\n//     aliasName: string,\n//     options?: AliasesDeleteOptionalParams,\n//   ): Promise<void> {\n//     return this.client.sendOperationRequest(\n//       { aliasName, options },\n//       deleteOperationSpec,\n//     );\n//   }\n\n//   /**\n//    * Retrieves an alias definition.\n//    * @param aliasName The name of the alias to retrieve.\n//    * @param options The options parameters.\n//    */\n//   get(\n//     aliasName: string,\n//     options?: AliasesGetOptionalParams,\n//   ): Promise<AliasesGetResponse> {\n//     return this.client.sendOperationRequest(\n//       { aliasName, options },\n//       getOperationSpec,\n//     );\n//   }\n// }\n// // Operation Specifications\n// const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\n// const createOperationSpec: coreClient.OperationSpec = {\n//   path: \"/aliases\",\n//   httpMethod: \"POST\",\n//   responses: {\n//     201: {\n//       bodyMapper: Mappers.SearchAlias,\n//     },\n//     default: {\n//       bodyMapper: Mappers.ErrorResponse,\n//     },\n//   },\n//   requestBody: Parameters.alias,\n//   queryParameters: [Parameters.apiVersion],\n//   urlParameters: [Parameters.endpoint],\n//   headerParameters: [Parameters.contentType, Parameters.accept],\n//   mediaType: \"json\",\n//   serializer,\n// };\n// const listOperationSpec: coreClient.OperationSpec = {\n//   path: \"/aliases\",\n//   httpMethod: \"GET\",\n//   responses: {\n//     200: {\n//       bodyMapper: Mappers.ListAliasesResult,\n//     },\n//     default: {\n//       bodyMapper: Mappers.ErrorResponse,\n//     },\n//   },\n//   queryParameters: [Parameters.apiVersion],\n//   urlParameters: [Parameters.endpoint],\n//   headerParameters: [Parameters.accept],\n//   serializer,\n// };\n// const createOrUpdateOperationSpec: coreClient.OperationSpec = {\n//   path: \"/aliases('{aliasName}')\",\n//   httpMethod: \"PUT\",\n//   responses: {\n//     200: {\n//       bodyMapper: Mappers.SearchAlias,\n//     },\n//     201: {\n//       bodyMapper: Mappers.SearchAlias,\n//     },\n//     default: {\n//       bodyMapper: Mappers.ErrorResponse,\n//     },\n//   },\n//   requestBody: Parameters.alias,\n//   queryParameters: [Parameters.apiVersion],\n//   urlParameters: [Parameters.endpoint, Parameters.aliasName],\n//   headerParameters: [\n//     Parameters.contentType,\n//     Parameters.accept,\n//     Parameters.ifMatch,\n//     Parameters.ifNoneMatch,\n//     Parameters.prefer,\n//   ],\n//   mediaType: \"json\",\n//   serializer,\n// };\n// const deleteOperationSpec: coreClient.OperationSpec = {\n//   path: \"/aliases('{aliasName}')\",\n//   httpMethod: \"DELETE\",\n//   responses: {\n//     204: {},\n//     404: {},\n//     default: {\n//       bodyMapper: Mappers.ErrorResponse,\n//     },\n//   },\n//   queryParameters: [Parameters.apiVersion],\n//   urlParameters: [Parameters.endpoint, Parameters.aliasName],\n//   headerParameters: [\n//     Parameters.accept,\n//     Parameters.ifMatch,\n//     Parameters.ifNoneMatch,\n//   ],\n//   serializer,\n// };\n// const getOperationSpec: coreClient.OperationSpec = {\n//   path: \"/aliases('{aliasName}')\",\n//   httpMethod: \"GET\",\n//   responses: {\n//     200: {\n//       bodyMapper: Mappers.SearchAlias,\n//     },\n//     default: {\n//       bodyMapper: Mappers.ErrorResponse,\n//     },\n//   },\n//   queryParameters: [Parameters.apiVersion],\n//   urlParameters: [Parameters.endpoint, Parameters.aliasName],\n//   headerParameters: [Parameters.accept],\n//   serializer,\n// };\n"]}