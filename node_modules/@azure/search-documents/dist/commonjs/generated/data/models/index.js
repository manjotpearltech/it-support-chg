"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.KnownSemanticSearchResultsType = exports.KnownSemanticErrorReason = exports.KnownVectorFilterMode = exports.KnownVectorQueryKind = exports.KnownQueryDebugMode = exports.KnownQueryCaptionType = exports.KnownQueryAnswerType = exports.KnownSemanticErrorMode = exports.KnownApiVersion20250901 = void 0;
/** Known values of {@link ApiVersion20250901} that the service accepts. */
var KnownApiVersion20250901;
(function (KnownApiVersion20250901) {
    /** Api Version '2025-09-01' */
    KnownApiVersion20250901["TwoThousandTwentyFive0901"] = "2025-09-01";
})(KnownApiVersion20250901 || (exports.KnownApiVersion20250901 = KnownApiVersion20250901 = {}));
/** Known values of {@link SemanticErrorMode} that the service accepts. */
var KnownSemanticErrorMode;
(function (KnownSemanticErrorMode) {
    /** If the semantic processing fails, partial results still return. The definition of partial results depends on what semantic step failed and what was the reason for failure. */
    KnownSemanticErrorMode["Partial"] = "partial";
    /** If there is an exception during the semantic processing step, the query will fail and return the appropriate HTTP code depending on the error. */
    KnownSemanticErrorMode["Fail"] = "fail";
})(KnownSemanticErrorMode || (exports.KnownSemanticErrorMode = KnownSemanticErrorMode = {}));
/** Known values of {@link QueryAnswerType} that the service accepts. */
var KnownQueryAnswerType;
(function (KnownQueryAnswerType) {
    /** Do not return answers for the query. */
    KnownQueryAnswerType["None"] = "none";
    /** Extracts answer candidates from the contents of the documents returned in response to a query expressed as a question in natural language. */
    KnownQueryAnswerType["Extractive"] = "extractive";
})(KnownQueryAnswerType || (exports.KnownQueryAnswerType = KnownQueryAnswerType = {}));
/** Known values of {@link QueryCaptionType} that the service accepts. */
var KnownQueryCaptionType;
(function (KnownQueryCaptionType) {
    /** Do not return captions for the query. */
    KnownQueryCaptionType["None"] = "none";
    /** Extracts captions from the matching documents that contain passages relevant to the search query. */
    KnownQueryCaptionType["Extractive"] = "extractive";
})(KnownQueryCaptionType || (exports.KnownQueryCaptionType = KnownQueryCaptionType = {}));
/** Known values of {@link QueryDebugMode} that the service accepts. */
var KnownQueryDebugMode;
(function (KnownQueryDebugMode) {
    /** No query debugging information will be returned. */
    KnownQueryDebugMode["Disabled"] = "disabled";
    /** Allows the user to further explore their hybrid and vector query results. */
    KnownQueryDebugMode["Vector"] = "vector";
})(KnownQueryDebugMode || (exports.KnownQueryDebugMode = KnownQueryDebugMode = {}));
/** Known values of {@link VectorQueryKind} that the service accepts. */
var KnownVectorQueryKind;
(function (KnownVectorQueryKind) {
    /** Vector query where a raw vector value is provided. */
    KnownVectorQueryKind["Vector"] = "vector";
    /** Vector query where a text value that needs to be vectorized is provided. */
    KnownVectorQueryKind["Text"] = "text";
})(KnownVectorQueryKind || (exports.KnownVectorQueryKind = KnownVectorQueryKind = {}));
/** Known values of {@link VectorFilterMode} that the service accepts. */
var KnownVectorFilterMode;
(function (KnownVectorFilterMode) {
    /** The filter will be applied after the candidate set of vector results is returned. Depending on the filter selectivity, this can result in fewer results than requested by the parameter 'k'. */
    KnownVectorFilterMode["PostFilter"] = "postFilter";
    /** The filter will be applied before the search query. */
    KnownVectorFilterMode["PreFilter"] = "preFilter";
})(KnownVectorFilterMode || (exports.KnownVectorFilterMode = KnownVectorFilterMode = {}));
/** Known values of {@link SemanticErrorReason} that the service accepts. */
var KnownSemanticErrorReason;
(function (KnownSemanticErrorReason) {
    /** If `semanticMaxWaitInMilliseconds` was set and the semantic processing duration exceeded that value. Only the base results were returned. */
    KnownSemanticErrorReason["MaxWaitExceeded"] = "maxWaitExceeded";
    /** The request was throttled. Only the base results were returned. */
    KnownSemanticErrorReason["CapacityOverloaded"] = "capacityOverloaded";
    /** At least one step of the semantic process failed. */
    KnownSemanticErrorReason["Transient"] = "transient";
})(KnownSemanticErrorReason || (exports.KnownSemanticErrorReason = KnownSemanticErrorReason = {}));
/** Known values of {@link SemanticSearchResultsType} that the service accepts. */
var KnownSemanticSearchResultsType;
(function (KnownSemanticSearchResultsType) {
    /** Results without any semantic enrichment or reranking. */
    KnownSemanticSearchResultsType["BaseResults"] = "baseResults";
    /** Results have been reranked with the reranker model and will include semantic captions. They will not include any answers, answers highlights or caption highlights. */
    KnownSemanticSearchResultsType["RerankedResults"] = "rerankedResults";
})(KnownSemanticSearchResultsType || (exports.KnownSemanticSearchResultsType = KnownSemanticSearchResultsType = {}));
//# sourceMappingURL=index.js.map